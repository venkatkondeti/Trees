package trees;


public class FenwickTree {
	
	
	public static int[] createBinaryIndexTree(int[] array){
		if(array==null || array.length==1)
			return array;
		int[] bit=new int[array.length+1];
		for(int i=1;i<=array.length;i++)
			updateBinaryIndexTree(bit, array[i-1],i);
		return bit;
	}
	
	private static void updateBinaryIndexTree(int[] bit,int val,int index){
		while(index<bit.length){
			bit[index]+=val;
			index=getNext(index);
		}
	}

	private static int getNext(int index) {
		return index+(index & -index);
	}
	
	private static int getParent(int index) {
		return index-(index & -index);
	}

	public static int getSum(int[] bit, int index){
		index=index+1;
		int sum=0;
		while(index>0){
			sum+=bit[index];
			index=getParent(index);
		}
		return sum;
	}
	
	 public static void main(String args[]){
	        int input[] = {1,2,3,4,5,6,7};
	        FenwickTree ft = new FenwickTree();
	        int binaryIndexedTree[] = ft.createBinaryIndexTree(input);
	        System.out.println(getSum(binaryIndexedTree, 6));
	        assert 1 == ft.getSum(binaryIndexedTree, 0);
	        assert 3 == ft.getSum(binaryIndexedTree, 1);
	        assert 6 == ft.getSum(binaryIndexedTree, 2);
	        assert 10 == ft.getSum(binaryIndexedTree, 3);
	        assert 15 == ft.getSum(binaryIndexedTree, 4);
	        assert 21 == ft.getSum(binaryIndexedTree, 5);
	        assert 28 == ft.getSum(binaryIndexedTree, 6);
	    }
}
