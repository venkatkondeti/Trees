package com.segment.tree;

public class STLazyPropagation {

	public static int[] newarray=new int[100];
	public static int[] lazy=new int[100];
	
	public static int[] createSegmentTree(int[] array){
		if(array==null )
			return null;
		if(array.length==1 || array.length==0)
			return array;
		//int x=(int) Math.ceil(Math.log(array.length-1)/Math.log(2));
		//int[] newarray=new int[(int) (2*Math.pow(2, x)-1)];
		createSegmentTreeUtil(array,0,array.length-1,0);
		return newarray;
	}

	private static int createSegmentTreeUtil(int[] array, int ss, int se, int si) {
		if(ss==se){
			newarray[si]=array[ss];
			return newarray[si];
		}
		
		int mid=getMid(ss,se);
		return newarray[si]=createSegmentTreeUtil(array, ss, mid,  2*si+1)+
							createSegmentTreeUtil(array, mid+1, se, 2*si+2);
		
	}

	private static int getMid(int ss, int se) {
		return ss+(se-ss)/2;
	}
	
	public static void updateRange(int n, int us,int ue,int diff){
		if(us>ue)
			return;
		updateRangeUtil(0,0,n-1,us,ue,diff);
	}
	
	private static void updateRangeUtil(int si, int ss, int se, int us, int ue, int diff) {
		if(lazy[si]!=0){
			newarray[si]+=(se-ss+1)*lazy[si];
			if(ss!=se){
				lazy[2*si+1]+=lazy[si];
				lazy[2*si+2]+=lazy[si];
			}
			lazy[si]=0;
		}
		
		if(ss>se || ss>ue || se<us)
			return;
		
		if(ss>=us && se<=ue){
			newarray[si]+=(se-ss+1)*diff;
			if(ss!=se){
				lazy[2*si+1]+=diff;
				lazy[2*si+2]+=diff;	
			}
			return;
		}
		
		int mid=getMid(ss, se);
		updateRangeUtil(2*si+1, ss, mid, us, ue, diff);
		updateRangeUtil(2*si+2, mid+1, se, us, ue, diff);
		newarray[si]=newarray[2*si+1]+newarray[2*si+2];
	}

	public static int getSum(int n, int us,int ue){
		if(us>ue || us<0 || ue>n-1)
			return -1;
		return getSumUtil(0,0,n-1,us,ue);
	}
	
	private static int getSumUtil(int si, int ss, int se, int us, int ue) {
		if(lazy[si]!=0){
			newarray[si]+=(se-ss+1)*lazy[si];
			if(ss!=se){
				lazy[2*si+1]+=lazy[si];
				lazy[2*si+2]+=lazy[si];
			}
			lazy[si]=0;
		}
		
		if(ss>se || ss>ue || se<us)
			return 0;
		
		if(ss>=us && se<=ue)
			return newarray[si];
		
		int mid=getMid(ss, se);
		return getSumUtil(2*si+1, ss, mid, us, ue)+getSumUtil(2*si+2, mid+1, se, us, ue);
	}

	public static void main(String[] args) {
		int arr[] = {1, 3, 5, 7, 9, 11};
		int[] temp=createSegmentTree(arr);
		for(int i=0;i<temp.length;i++)
		System.out.print(" "+temp[i]);
		System.out.println();
		System.out.println("sum of values in given range"+getSum(6, 1, 3));
		updateRange(6, 1, 5, 10);
		System.out.println("updated sum of values in given range"+getSum(6, 1, 3));
	}
}
